name: Scan, Lint, and Test

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  scan_and_lint:
    name: Scan & Lint files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install flake8 bandit

      - name: Run Linter (Flake8)
        run: |
          flake8 .

      - name: Run Security Scan (Bandit)
        run: |
          bandit -r .

      - name: Install dependencies and run linter for frontend
        working-directory: frontend
        run: |
          npm install
          npm run lint

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          coverage run manage.py test
          coverage report

  # build_and_deploy:
  #   name: Build & Deploy
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Build Docker Image
  #       run: |
  #         docker build -t myapp:latest .

  #     - 

  #     - name: Push Docker Image to Registry
  #       run: |
  #         echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  #         docker tag myapp:latest myregistry.com/myapp:latest
  #         docker push myregistry.com/myapp:latest

  #     - name: Deploy to Server
  #       run: |
  #         ssh -o StrictHostKeyChecking=no user@myserver.com "docker pull myregistry.com/myapp:latest && docker-compose up -d"
