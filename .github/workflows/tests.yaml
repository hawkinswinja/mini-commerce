name: Lint, Scan and Tests

on:
  pull_request:
    branches:
      - main
  workflow_call:
  workflow_dispatch:

jobs:
  scan_and_lint:
    name: Scan & Lint files
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit

      - name: Run Linter (Flake8)
        working-directory: backend
        run: |
          flake8 --ignore=E501,F401 minicommerce orders users

      - name: Run Security Scan (Bandit)
        working-directory: backend
        run: |
          bandit -r -x tests.py users orders

      - name: Install dependencies and run linter for frontend
        working-directory: frontend
        run: |
          npm install
          npm run lint

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile

      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile
          ignore: DL3008
          

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres:alpine3.19
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdatabase
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run Tests with Coverage
        working-directory: backend
        run: coverage run manage.py test
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          AT_USERNAME: ${{ secrets.AT_USERNAME }}
          AT_APIKEY: ${{ secrets.AT_APIKEY }}
          OIDC_RP_CLIENT_ID: ${{ secrets.OIDC_RP_CLIENT_ID }}
          OIDC_RP_CLIENT_SECRET: ${{ secrets.OIDC_RP_CLIENT_SECRET }}
          OIDC_OP_AUTHORIZATION_ENDPOINT: ${{ secrets.OIDC_OP_AUTHORIZATION_ENDPOINT }}
          OIDC_OP_TOKEN_ENDPOINT: ${{ secrets.OIDC_OP_TOKEN_ENDPOINT }}
          OIDC_OP_USER_ENDPOINT: ${{ secrets.OIDC_OP_USER_ENDPOINT }}
          OIDC_OP_JWKS_ENDPOINT: ${{ secrets.OIDC_OP_JWKS_ENDPOINT }}
          LOGIN_REDIRECT_URL: ${{ secrets.LOGIN_REDIRECT_URL }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          POSTGRES_USER: testuser
          POSTGRES_DB: testdatabase
          POSTGRES_PASSWORD: testpassword
          POSTGRES_HOST: localhost 
          
      - name: Coverage report
        working-directory: backend
        run: coverage report
   
