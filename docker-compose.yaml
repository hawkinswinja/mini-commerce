name: m-commerce
services:
  frontend:
    image: hawkinswinja/m-commerce-frontend:${FRONTEND_IMAGE_TAG}
    ports:
      - 80:80
    depends_on:
      - backend
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    restart: "unless-stopped"
  
  backend: 
    image: hawkinswinja/m-commerce-backend:${BACKEND_IMAGE_TAG}
    expose:
      - "8000"
    restart: "unless-stopped"
    volumes:
      - ./backend:/app
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - AT_USERNAME=${AT_USERNAME}
      - AT_APIKEY=${AT_APIKEY}
      - OIDC_RP_CLIENT_ID=${OIDC_RP_CLIENT_ID}
      - OIDC_RP_CLIENT_SECRET=${OIDC_RP_CLIENT_SECRET}
      - OIDC_OP_AUTHORIZATION_ENDPOINT=${OIDC_OP_AUTHORIZATION_ENDPOINT}
      - OIDC_OP_TOKEN_ENDPOINT=${OIDC_OP_TOKEN_ENDPOINT}
      - OIDC_OP_USER_ENDPOINT=${OIDC_OP_USER_ENDPOINT}
      - OIDC_OP_JWKS_ENDPOINT=${OIDC_OP_JWKS_ENDPOINT}
      - LOGIN_REDIRECT_URL=${LOGIN_REDIRECT_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
    depends_on:
      - migrations

  migrations:
    image: hawkinswinja/m-commerce-backend:${BACKEND_IMAGE_TAG}
    command: "python manage.py migrate"
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - AT_USERNAME=${AT_USERNAME}
      - AT_APIKEY=${AT_APIKEY}
      - OIDC_RP_CLIENT_ID=${OIDC_RP_CLIENT_ID}
      - OIDC_RP_CLIENT_SECRET=${OIDC_RP_CLIENT_SECRET}
      - OIDC_OP_AUTHORIZATION_ENDPOINT=${OIDC_OP_AUTHORIZATION_ENDPOINT}
      - OIDC_OP_TOKEN_ENDPOINT=${OIDC_OP_TOKEN_ENDPOINT}
      - OIDC_OP_USER_ENDPOINT=${OIDC_OP_USER_ENDPOINT}
      - OIDC_OP_JWKS_ENDPOINT=${OIDC_OP_JWKS_ENDPOINT}
      - LOGIN_REDIRECT_URL=${LOGIN_REDIRECT_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres     
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:alpine3.19
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    expose:
    - 5432
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data

  # watchtower:
  #   image: containrrr/watchtower
  #   command: --interval 30
  #   labels:
  #     - "com.centurylinklabs.watchtower.enable=false"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     WATCHTOWER_CLEANUP: true
  #     WATCHTOWER_ROLLING_RESTART: true 
  #   restart: "unless-stopped"
volumes: 
  db:

